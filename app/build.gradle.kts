/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    kotlin("jvm") version "1.8.10"
    application
    id("java")
}

repositories {
    mavenCentral()
    maven { url = uri("https://repo.maven.apache.org/maven2/") } // Ensure default Maven repo
}

dependencies {
    // AWS Lambda dependencies
    implementation("com.amazonaws:aws-lambda-java-core:1.2.1")
    implementation("com.amazonaws:aws-lambda-java-events:3.11.0")

    // AWS SDK for DynamoDB
    implementation("software.amazon.awssdk:dynamodb:2.20.84")

    // Jackson for JSON serialization/deserialization
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.15.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.15.0")

    // Kotlin standard library
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.8.0")

    // Test dependencies
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.0")
    testImplementation("org.assertj:assertj-core:3.24.2")
    testImplementation("org.mockito:mockito-core:5.7.0") // Added for mocking
    testImplementation("org.mockito:mockito-junit-jupiter:5.7.0") // Mockito JUnit 5 integration
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = "com.example.LambdaHandlerKt" // Ensure this matches the actual entry point of your app
}

// Create a task to build the JAR file with dependencies
task<Jar>("fatJar") {
    archiveBaseName.set("lambda-app")
    archiveVersion.set("1.0.0")
    from(sourceSets.main.get().output)
    dependsOn(configurations.runtimeClasspath)
    
    // Add the runtimeClasspath JARs to the JAR file
    from({
        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
    }) {
        // Handle duplicate entries
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    
    manifest {
        attributes["Main-Class"] = "com.example.LambdaHandlerKt" // Adjust according to your handler's entry point
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
